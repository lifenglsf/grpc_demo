// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LaptopServiceClient is the client API for LaptopService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LaptopServiceClient interface {
	CreateLaptop(ctx context.Context, in *CreateLaptopRequest, opts ...grpc.CallOption) (*CreatelaptopResponse, error)
}

type laptopServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLaptopServiceClient(cc grpc.ClientConnInterface) LaptopServiceClient {
	return &laptopServiceClient{cc}
}

var laptopServiceCreateLaptopStreamDesc = &grpc.StreamDesc{
	StreamName: "createLaptop",
}

func (c *laptopServiceClient) CreateLaptop(ctx context.Context, in *CreateLaptopRequest, opts ...grpc.CallOption) (*CreatelaptopResponse, error) {
	out := new(CreatelaptopResponse)
	err := c.cc.Invoke(ctx, "/hw.LaptopService/createLaptop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LaptopServiceService is the service API for LaptopService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterLaptopServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type LaptopServiceService struct {
	CreateLaptop func(context.Context, *CreateLaptopRequest) (*CreatelaptopResponse, error)
}

func (s *LaptopServiceService) createLaptop(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLaptopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.CreateLaptop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/hw.LaptopService/CreateLaptop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateLaptop(ctx, req.(*CreateLaptopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterLaptopServiceService registers a service implementation with a gRPC server.
func RegisterLaptopServiceService(s grpc.ServiceRegistrar, srv *LaptopServiceService) {
	srvCopy := *srv
	if srvCopy.CreateLaptop == nil {
		srvCopy.CreateLaptop = func(context.Context, *CreateLaptopRequest) (*CreatelaptopResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method CreateLaptop not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "hw.LaptopService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "createLaptop",
				Handler:    srvCopy.createLaptop,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "laptop_service.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewLaptopServiceService creates a new LaptopServiceService containing the
// implemented methods of the LaptopService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewLaptopServiceService(s interface{}) *LaptopServiceService {
	ns := &LaptopServiceService{}
	if h, ok := s.(interface {
		CreateLaptop(context.Context, *CreateLaptopRequest) (*CreatelaptopResponse, error)
	}); ok {
		ns.CreateLaptop = h.CreateLaptop
	}
	return ns
}

// UnstableLaptopServiceService is the service API for LaptopService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableLaptopServiceService interface {
	CreateLaptop(context.Context, *CreateLaptopRequest) (*CreatelaptopResponse, error)
}
